
STAPPLER_ROOT ?= ../../..
LOCAL_ROOT = .

# директория сборки
LOCAL_OUTDIR := lib

# название собираемой библиотеки
LOCAL_LIBRARY := Lib

# используем набор инструментов serenity
LOCAL_TOOLKIT := serenity

# определяем путь для установки напрямую в директорию сборки
LOCAL_INSTALL_DIR := $(LOCAL_OUTDIR)

# Собираем директорию src
LOCAL_SRCS_DIRS :=  src
LOCAL_SRCS_OBJS :=

# Разрешаем включение файлов из src
LOCAL_INCLUDES_DIRS := src
LOCAL_INCLUDES_OBJS :=

# переопределяем стандартные опции оптимизации, чтобы включить названия функции
LOCAL_OPTIMIZATION := -g -O2

#вызов make all будет автоматически копировать собранный файл в директорию назначения
LOCAL_FORCE_INSTALL := 1

#задаём путь к файлам конфигурации
CONF_DIR:= $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# инициируем сборку как локальную, поскольку serenity собирается
# только для теущей системы и недоступна для кросс-компиляции
include $(STAPPLER_ROOT)/make/local.mk

#экспортируем конфигурацию по умолчанию для скрипта сборки конфига
export SERENITY_DEFAULT_CONFIG

# команда для сборки файла конфигурации
# этот файл конфигурации используется только для отладки,
# для релиза нужен полноценно сконфигурированный сервер
$(LOCAL_OUTDIR)/httpd.conf: Makefile
	@mkdir -p $(LOCAL_OUTDIR)
	@mkdir -p $(CONF_DIR)logs
	@echo '# Autogenerated by makefile\n' > $@
	@echo "$$SERENITY_DEFAULT_CONFIG" >> $@
	@echo 'ServerRoot "$(CONF_DIR)"' >> $@
	@echo 'ErrorLog "$(CONF_DIR)logs/error_log"' >> $@
	@echo 'CustomLog "$(CONF_DIR)logs/access_log" common' >> $@
	@echo 'SerenitySourceRoot "$(CONF_DIR)lib"' >> $@
	@echo 'Include $(CONF_DIR)conf/serenity-local.conf' >> $@

all: $(LOCAL_OUTDIR)/httpd.conf
